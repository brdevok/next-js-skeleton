/* eslint-disable max-lines */

/** @type {import('eslint').Linter.Config['rules']} */
export default {
	'curly': 'error',
	'eqeqeq': 'error',
	'yoda': 'error',
	'camelcase': 'off',
	'no-debugger': 'warn',
	'no-misleading-character-class': 'warn',
	'no-warning-comments': 'warn',
	'max-lines': ['warn', 200],
	'max-nested-callbacks': ['warn', 3],
	'getter-return': 'error',
	'no-await-in-loop': 'error',
	'no-compare-neg-zero': 'error',
	'no-cond-assign': 'error',
	'no-const-assign': 'error',
	'no-constant-condition': 'error',
	'no-constructor-return': 'error',
	'no-dupe-args': 'error',
	'no-dupe-class-members': 'error',
	'no-dupe-else-if': 'error',
	'no-dupe-keys': 'error',
	'no-duplicate-case': 'error',
	'no-duplicate-imports': 'error',
	'no-empty-character-class': 'error',
	'no-empty-pattern': 'error',
	'no-ex-assign': 'error',
	'no-fallthrough': 'error',
	'no-import-assign': 'error',
	'no-inner-declarations': 'error',
	'no-invalid-regexp': 'error',
	'no-irregular-whitespace': 'error',
	'no-loss-of-precision': 'error',
	'no-new-native-nonconstructor': 'error',
	'no-promise-executor-return': 'error',
	'no-self-assign': 'error',
	'no-self-compare': 'error',
	'no-setter-return': 'error',
	'no-sparse-arrays': 'error',
	'no-template-curly-in-string': 'error',
	'no-this-before-super': 'error',
	'no-unexpected-multiline': 'error',
	'no-unreachable': 'error',
	'no-unreachable-loop': 'error',
	'no-unsafe-finally': 'error',
	'no-unsafe-negation': 'error',
	'no-unsafe-optional-chaining': 'error',
	'no-unused-private-class-members': 'error',
	'no-unused-vars': 'error',
	'no-use-before-define': 'error',
	'no-useless-backreference': 'error',
	'require-atomic-updates': 'error',
	'use-isnan': 'error',
	'valid-typeof': 'error',
	'accessor-pairs': 'error',
	'default-case-last': 'error',
	'default-param-last': 'error',
	'dot-notation': 'error',
	'func-name-matching': 'error',
	'no-alert': 'error',
	'no-bitwise': 'error',
	'no-caller': 'error',
	'no-case-declarations': 'error',
	'no-console': 'warn',
	'no-else-return': 'error',
	'no-empty': 'error',
	'no-empty-function': 'error',
	'no-empty-static-block': 'error',
	'no-extend-native': 'error',
	'no-extra-bind': 'error',
	'no-extra-boolean-cast': 'error',
	'no-global-assign': 'warn',
	'no-implicit-coercion': 'error',
	'no-implied-eval': 'error',
	'no-inline-comments': 'error',
	'no-invalid-this': 'error',
	'no-iterator': 'error',
	'no-labels': 'error',
	'no-lone-blocks': 'error',
	'no-multi-assign': 'error',
	'no-multi-str': 'error',
	'no-new': 'error',
	'no-new-func': 'error',
	'no-new-wrappers': 'error',
	'no-object-constructor': 'error',
	'no-octal': 'error',
	'no-octal-escape': 'error',
	'no-param-reassign': 'error',
	'no-proto': 'error',
	'no-redeclare': 'error',
	'no-regex-spaces': 'error',
	'no-return-assign': 'error',
	'no-script-url': 'error',
	'no-sequences': 'error',
	'no-shadow': 'error',
	'no-shadow-restricted-names': 'error',
	'no-throw-literal': 'error',
	'no-undef-init': 'error',
	'no-underscore-dangle': 'error',
	'no-unneeded-ternary': 'error',
	'no-unused-expressions': 'error',
	'no-useless-call': 'error',
	'no-useless-computed-key': 'error',
	'no-useless-concat': 'error',
	'no-useless-constructor': 'error',
	'no-useless-escape': 'error',
	'no-useless-rename': 'error',
	'no-useless-return': 'error',
	'no-var': 'error',
	'no-void': 'error',
	'no-with': 'error',
	'object-shorthand': 'error',
	'prefer-arrow-callback': 'error',
	'prefer-const': 'error',
	'prefer-exponentation-operator': 'off',
	'prefer-numeric-literals': 'error',
	'prefer-object-has-own': 'error',
	'prefer-regex-literals': 'error',
	'prefer-rest-params': 'error',
	'prefer-template': 'error',
	'require-await': 'error',
	'require-unicode-regexp': 'error',
	'symbol-description': 'error',
	'arrow-body-style': ['error', 'always'],
	'func-names': ['error', 'never'],
	'func-style': ['error', 'expression'],
	'logical-assignment-operators': ['error', 'never'],
	'max-classes-per-file': ['error', 1],
	'max-params': ['error', 3],
	'operator-assignment': ['error', 'never'],
	'prefer-promise-reject-errors': [
		'error',
		{
			allowEmptyReject: true,
		},
	],
	'sort-imports': [
		'error',
		{
			ignoreCase: true,
			ignoreDeclarationSort: true,
			ignoreMemberSort: true,
			allowSeparatedGroups: true,
			memberSyntaxSortOrder: ['none', 'all', 'single', 'multiple'],
		},
	],
	'consistent-return': 'off',
	'@stylistic/arrow-parens': 'off',
	'@stylistic/eol-last': 'off',
	'@stylistic/no-tabs': 'off',
	'@stylistic/indent': ['error', 'tab'],
	'@stylistic/quotes': ['error', 'single'],
	'@stylistic/semi': ['error', 'always'],
	'@stylistic/member-delimiter-style': [
		'error',
		{
			multiline: {
				delimiter: 'semi',
				requireLast: true,
			},
		},
	],
	'@typescript-eslint/no-empty-object-type': 'warn',
	'@typescript-eslint/await-thenable': 'error',
	'@typescript-eslint/consistent-generic-constructors': 'error',
	'@typescript-eslint/consistent-return': 'error',
	'@typescript-eslint/explicit-function-return-type': 'error',
	'@typescript-eslint/no-array-delete': 'error',
	'@typescript-eslint/no-confusing-non-null-assertion': 'error',
	'@typescript-eslint/no-extra-non-null-assertion': 'error',
	'@typescript-eslint/no-floating-promises': 'error',
	'@typescript-eslint/no-duplicate-enum-values': 'error',
	'@typescript-eslint/no-for-in-array': 'error',
	'@typescript-eslint/no-invalid-void-type': 'error',
	'@typescript-eslint/no-meaningless-void-operator': 'error',
	'@typescript-eslint/no-misused-new': 'error',
	'@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
	'@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
	'@typescript-eslint/no-redundant-type-constituents': 'error',
	'@typescript-eslint/no-require-imports': 'error',
	'@typescript-eslint/prefer-as-const': 'error',
	'@typescript-eslint/prefer-for-of': 'error',
	'@typescript-eslint/no-unnecessary-condition': 'error',
	'@typescript-eslint/no-unnecessary-qualifier': 'error',
	'@typescript-eslint/prefer-optional-chain': 'error',
	'@typescript-eslint/prefer-function-type': 'error',
	'@typescript-eslint/prefer-readonly': 'error',
	'@typescript-eslint/prefer-regexp-exec': 'error',
	'@typescript-eslint/prefer-string-starts-ends-with': 'error',
	'@typescript-eslint/promise-function-async': 'error',
	'@typescript-eslint/use-unknown-in-catch-callback-variable': 'error',
	'@typescript-eslint/method-signature-style': ['error', 'method'],
	'@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
	'@typescript-eslint/consistent-type-imports': [
		'error',
		{
			fixStyle: 'separate-type-imports',
			prefer: 'type-imports',
		},
	],
	'@typescript-eslint/consistent-type-assertions': [
		'error',
		{
			assertionStyle: 'as',
		},
	],
	'@typescript-eslint/ban-ts-comment': [
		'error',
		{
			'ts-expect-error': 'allow-with-description',
			'ts-ignore': 'allow-with-description',
			'ts-nocheck': 'allow-with-description',
			'ts-check': 'allow-with-description',
		},
	],
	'@typescript-eslint/array-type': [
		'error',
		{
			default: 'generic',
			readonly: 'generic',
		},
	],
	'@typescript-eslint/naming-convention': [
		'error',
		{
			selector: 'default',
			format: ['camelCase'],
			leadingUnderscore: 'allow',
			trailingUnderscore: 'allow',
		},
		{
			selector: ['objectLiteralProperty', 'typeProperty'],
			format: ['camelCase', 'PascalCase'],
		},
		{
			selector: ['objectLiteralProperty', 'typeProperty'],
			format: null,
			modifiers: ['requiresQuotes'],
		},
		{
			selector: ['function', 'classProperty'],
			format: ['camelCase', 'PascalCase'],
		},
		{
			selector: ['variable'],
			format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
			leadingUnderscore: 'allow',
			trailingUnderscore: 'allow',
		},
		{
			selector: ['typeLike', 'enumMember', 'class'],
			format: ['PascalCase'],
		},
		{
			selector: 'import',
			format: null,
		},
	],
};
